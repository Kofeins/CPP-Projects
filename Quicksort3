#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

void Partition(vector<int>&A, int l, int r, int&j, int&count)
{
    j = l;
    count = 1;
    swap(A[l], A[(int)((l + r) / 2)]);
    int x;
    x = A[l];
    
    for (int i = l + 1; i <= r; i++)
    {
        if (A[i] <= x)
        {
            j++;
            swap(A[i], A[j]);
            
            cout << "+ ";
            
            if (A[j] == x)
            {
                swap(A[j], A[l + count]);
                count++;
                
                cout << "+ ";
            }
        }
    }
    
    while ((A[l + count] < x) && ((l + count) <= r))
    {
        swap(A[l], A[l + count]);
        l++;
        
        cout << "+ ";
    }
   
}

void Quicksort(vector<int>&A, int l, int r)
{
    if (l >= r)
        return;
        
    int j, count;
    
    Partition(A, l, r, j, count);
    
    Quicksort(A, l, j - count);
    Quicksort(A, j + 1, r);
}


int main()
{
    int n =0;
    cout << "n = ";
    cin >> n;
    vector<int> A(n);
    
    
    for (int i = 0; i < n; i++)
    {
         A[i] = 1 + rand() % 100;   
    }
    
    cout << endl << "Vector A" << endl;
    for (int i = 0; i < n; i++)
    {
        cout << A[i] << " ";    
    }
    
    cout << endl;
    cout << endl;
    
    Quicksort(A, 0, n - 1);
    
    cout << endl;
    cout << endl;
    
    cout << endl << "Vector A!" << endl;
    for (int i = 0; i < n; i++)
    {
        cout << A[i] << " ";    
    }
    
    return 0;
}
