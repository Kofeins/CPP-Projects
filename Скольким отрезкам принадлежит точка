#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

void Partition(vector<int>&A, int l, int r, int&j, int&count)
{
    j = l;
    count = 1;
    swap(A[l], A[(int)((l + r) / 2)]);
    int x;
    x = A[l];
    
    for (int i = l + 1; i <= r; i++)
    {
        if (A[i] <= x)
        {
            j++;
            swap(A[i], A[j]);

            if (A[j] == x)
            {
                swap(A[j], A[l + count]);
                count++;
            }
        }
    }
    
    while ((A[l + count] < x) && ((l + count) <= r))
    {
        swap(A[l], A[l + count]);
        l++;
    }
   
}

void Quicksort(vector<int>&A, int l, int r)
{
    if (l >= r)
        return;
        
    int j, count;
    
    Partition(A, l, r, j, count);
    
    Quicksort(A, l, j - count);
    Quicksort(A, j + 1, r);
}

int left(vector<int>&L, int x)
{
    int l = 0;
    int r = L.size() - 1;
    int m;
    
    if ((l == r) && (L[l] == x))
        return 1;
        
    if (x < L[l])
        return l;
    
    if (x >= L[r])
    {   
        r++;
        return r;
    }
    
    while (l < r)
    {
        m = (int)((l + r) / 2);
        
        if ((L[m] <= x) && (L[m + 1] > x)) 
            {
                m++;
                return m;
            }
            
        else if (L[m + 1] <= x)
            l = m + 1;
            
        else if (L[m] >= x)
            r = m;
            
    }        

    return 0;
}

int right(vector<int>&R, int x)
{
    int l = 0;
    int r = R.size() - 1;
    int m;
    
    if ((l == r) && (R[l] == x))
        return 0;
        
    if (x <= R[l])
        return l;
        
    if (x > R[r])
        {
            r++;
            return r;
        }
        
    while (l < r)
    {
        m = (int)((l + r) / 2);
        
        if ((R[m] < x) && (R[m + 1] >= x)) 
        {
            m++;
            return m;
        }

        else if (R[m] >= x)
            r = m;
        
        else if (R[m + 1] < x)
            l = m + 1;
       
    }
   
    
    return 0;
}


int main()
{
   

    int n = 0;
    int m = 0;
    
    cout << "n = ";
    cin >> n;
    cout << "m = ";
    cin >> m;
    
    
    vector<int> L(n);
    vector<int> R(n);
    vector<int> A(m);
    
        cout << " Left + Right" << endl;
    for (int i = 0; i < n; i++)
    {
        cin >> L[i] >> R[i];
        
    }

        cout << " Points" << endl;
    for (int i = 0; i < m; i++)
    {
        cin >> A[i];    
    }
    
    Quicksort(L, 0, n - 1);
    Quicksort(R, 0, n - 1);

        cout << endl;
        cout << " Left + Right -- sorted" << endl;
    for (int i = 0; i < n; i++)
    {
        cout << L[i] << "  " << R[i] << endl;
        
    }
        cout << endl;

    for (int i = 0; i < m; i++)
    {
        cout << "to  [" << A[i] << "]  Answer = " << left(L, A[i]) - right(R, A[i]) << " ( L = " << left(L, A[i]) << " R = " <<  right(R, A[i])  <<" )" << endl;
    }
    

    return 0;
}
